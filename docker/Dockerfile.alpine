FROM alpine:3.6

ARG GLOG_VER="0.3.4"
ARG AVRO_VER="1.8.2"
ARG RAPIDJSON_VER="1.1.0"
ARG LIBRDKAFKA_TAG="v0.11.3"
ARG KSPP_TAG="master"
ARG NGINX_VER="1.13.9"
ARG NGINX_I2K_TAG="master"

MAINTAINER sk svante.karlsson@csi.se

RUN echo "@testing http://nl.alpinelinux.org/alpine/edge/testing" >>/etc/apk/repositories

RUN apk add --no-cache --virtual .fetch-deps \
      ca-certificates \
      openssl \
      git \
      wget \
      tar && \
\
BUILD_DIR="$(mktemp -d)" && \
\
    wget -O "$BUILD_DIR/librdkafka.tar.gz" "https://github.com/edenhill/librdkafka/archive/$LIBRDKAFKA_TAG.tar.gz" && \
    mkdir -p $BUILD_DIR/librdkafka && \
    tar \
      --extract \
      --file "$BUILD_DIR/librdkafka.tar.gz" \
      --directory "$BUILD_DIR/librdkafka" \
      --strip-components 1 && \
\
    wget -O "$BUILD_DIR/google-glog.tar.gz" "https://github.com/google/glog/archive/v$GLOG_VER.tar.gz" && \
    mkdir -p $BUILD_DIR/glog && \
    tar \
      --extract \
      --file "$BUILD_DIR/google-glog.tar.gz" \
      --directory "$BUILD_DIR/glog" \
      --strip-components 1 && \
\
   wget -O "$BUILD_DIR/rapidjson.tar.gz" "https://github.com/miloyip/rapidjson/archive/v$RAPIDJSON_VER.tar.gz" && \
   mkdir -p $BUILD_DIR/rapidjson && \
   tar \
      --extract \
      --file "$BUILD_DIR/rapidjson.tar.gz" \
      --directory "$BUILD_DIR/rapidjson" \
      --strip-components 1 && \
\
    wget -O "$BUILD_DIR/avro.tar.gz" "https://github.com/apache/avro/archive/release-$AVRO_VER.tar.gz" && \
    mkdir -p $BUILD_DIR/avro && \
    tar \
      --extract \
      --file "$BUILD_DIR/avro.tar.gz" \
      --directory "$BUILD_DIR/avro" \
      --strip-components 1 && \
\
   wget -O "$BUILD_DIR/master.tar.gz" "https://github.com/bitbouncer/kspp/archive/$KSPP_TAG.tar.gz" && \
   mkdir -p $BUILD_DIR/kspp && \
   tar \
      --extract \
      --file "$BUILD_DIR/master.tar.gz" \
      --directory "$BUILD_DIR/kspp" \
      --strip-components 1 && \
\
    apk add --no-cache  --virtual .build-deps \
      bash \
      g++ \
      openssl-dev \
      make \
      cmake \
      boost-dev \
      musl-dev \
      zlib-dev \
      python \
      curl-dev \
      build-base \
      linux-headers \
      zlib zlib-dev \
      bzip2 bzip2-dev \
      snappy snappy-dev \
      lz4 lz4-dev \
      zstd@testing zstd-dev@testing \
      c-ares c-ares-dev \
      jemalloc && \
\
    cd "$BUILD_DIR/glog" && \
    ./configure --prefix=/usr/local && \
    make -j "$(getconf _NPROCESSORS_ONLN)" && \
    make install && \
\
    cd "$BUILD_DIR/librdkafka" && \
    ./configure --prefix=/usr/local && \
    make -j "$(getconf _NPROCESSORS_ONLN)" && \
    make install && \
\
   cd "$BUILD_DIR/avro" && \
   cd lang/c++/ && \
   mkdir build && \
   cd build && \
   cmake -DCMAKE_BUILD_TYPE=Release .. && \
   make -j "$(getconf _NPROCESSORS_ONLN)" && \
   make install && \
   rm /usr/local/bin/avrogencpp && \
\
   cd "$BUILD_DIR/rapidjson" && \
   mkdir build && \
   cd build && \
   cmake -DRAPIDJSON_BUILD_EXAMPLES=OFF -DRAPIDJSON_BUILD_DOC=OFF -DRAPIDJSON_BUILD_TESTS=OFF .. && \
   make install && \
\
   cd "$BUILD_DIR/kspp" && \
   mkdir build && \
   cd build && \
   cmake  -DCMAKE_BUILD_TYPE=Release .. && \
   make -j "$(getconf _NPROCESSORS_ONLN)" && \
   make install && \
   cd .. && \
   cp -r bin/* /usr/local/bin/

RUN BUILD_DIR="$(mktemp -d)" && \
\
    wget -O "$BUILD_DIR/nginx.tar.gz" "http://nginx.org/download/nginx-$NGINX_VER.tar.gz" && \
    mkdir -p $BUILD_DIR/nginx && \
    tar \
      --extract \
      --file "$BUILD_DIR/nginx.tar.gz" \
      --directory "$BUILD_DIR/nginx" \
      --strip-components 1 && \
\
   wget -O "$BUILD_DIR/nginx_i2k.tar.gz" "https://github.com/skarlsson/ngnx_i2k/archive/$NGINX_I2K_TAG.tar.gz" && \
   mkdir -p $BUILD_DIR/nginx_i2k && \
   tar \
      --extract \
      --file "$BUILD_DIR/nginx_i2k.tar.gz" \
      --directory "$BUILD_DIR/nginx_i2k" \
      --strip-components 1 && \
\
   cp  $BUILD_DIR/nginx_i2k/auto/make $BUILD_DIR/nginx/auto/make && \
\
  cd "$BUILD_DIR/nginx" && \
  ./configure \
      --sbin-path=/usr/local/nginx/nginx \
      --conf-path=/usr/local/nginx/nginx.conf \ 
      --pid-path=/usr/local/nginx/nginx.pid \
      --with-http_ssl_module \
      --without-http_rewrite_module \
      --add-module=../nginx_i2k && \
   make -j "$(getconf _NPROCESSORS_ONLN)" && \
   echo "2"

 

 
 

